*c99 v4.0 (c) 1985, 1987 Clint Pulley
       REF     C$CIND, C$DIV, C$REM, C$ASR, C$ASL, C$EQ, C$NE, C$LT, C$LE
       REF     C$GT, C$GE, C$ULT, C$ULE, C$UGT, C$UGE, C$LNEG, C$SWCH
       REF     GETCHA, GETS, PUTCHA, PUTS, LOCATE, POLL, TSCRN, EXIT, C$CALL
*/***************************************************************************
* *  Description:
* *      Read a file overRS232
* *      Not yet tested
* *
* *  History: 
* *  Date        Name        Modification
* *  2024-10-13  Jason Bacon Begin
* ***************************************************************************/
*
*#define FN_MAX    9
*
*void    main(void)
       DEF MAIN
MAIN
*
*{
*    int     serial_unit, file_unit, ch;
*    char    filename[FN_MAX];
*    
*    serial_unit = fopen("RS232/1.BA=9600.DA=8.PA=E.EC.LF", "u");
       AI      R14, -16
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 14                  *   Get Address of Symbol (Step 2)
       BL      R15                     *   Stack Push
       LI      R8, C$1                 *   Immediate Value
       BL      R15                     *   Stack Push
       LI      R8, C$1+32              *   Immediate Value
       BL      R15                     *   Stack Push
       BL      *R12                    *   Call A Function
       DATA    FOPEN
       AI      R14, 4
       MOV     *R14+, R9
       MOV     R8, *R9
*    fgets(filename, FN_MAX, serial_unit);
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)

       BL      R15                     *   Stack Push
       LI      R8, 9                   *   Immediate Value
       BL      R15                     *   Stack Push
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 18                  *   Get Address of Symbol (Step 2)
       MOV     *R8, R8
       BL      R15                     *   Stack Push
       BL      *R12                    *   Call A Function
       DATA    FGETS
       AI      R14, 6
*    puts(filename);
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)

       BL      R15                     *   Stack Push
       BL      *R12                    *   Call A Function
       DATA    PUTS
       INCT    R14, 
*    
*    file_unit = fopen(filename, "w");
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 12                  *   Get Address of Symbol (Step 2)
       BL      R15                     *   Stack Push
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       INCT    R8                      *   Get Address of Symbol (Step 2)
       BL      R15                     *   Stack Push
       LI      R8, C$1+34              *   Immediate Value
       BL      R15                     *   Stack Push
       BL      *R12                    *   Call A Function
       DATA    FOPEN
       AI      R14, 4
       MOV     *R14+, R9
       MOV     R8, *R9
*    while ( (ch=getc(serial_unit)) != EOF )
C$2
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 10                  *   Get Address of Symbol (Step 2)
       BL      R15                     *   Stack Push
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 16                  *   Get Address of Symbol (Step 2)
       MOV     *R8, R8
       BL      R15                     *   Stack Push
       BL      *R12                    *   Call A Function
       DATA    GETC
       INCT    R14, 
       MOV     *R14+, R9
       MOV     R8, *R9
       BL      R15                     *   Stack Push
       LI      R8, EOF                 *   Immediate Value
       BL      @C$NE                   *   Direct Call To Subroutine
       JNE     $ + 6
       B       @C$3                    *   Jump To C$3
*	putc(ch, file_unit);
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 10                  *   Get Address of Symbol (Step 2)
       MOV     *R8, R8
       BL      R15                     *   Stack Push
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 14                  *   Get Address of Symbol (Step 2)
       MOV     *R8, R8
       BL      R15                     *   Stack Push
       BL      *R12                    *   Call A Function
       DATA    PUTC
       AI      R14, 4
       B       @C$2                    *   Jump To C$2
C$3
*    fclose(file_unit);
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 12                  *   Get Address of Symbol (Step 2)
       MOV     *R8, R8
       BL      R15                     *   Stack Push
       BL      *R12                    *   Call A Function
       DATA    FCLOSE
       INCT    R14, 
*    
*    fclose(serial_unit);
       MOV     R14, R8
                                       *   Get Address of Symbol to (Step 1)
       AI      R8, 14                  *   Get Address of Symbol (Step 2)
       MOV     *R8, R8
       BL      R15                     *   Stack Push
       BL      *R12                    *   Call A Function
       DATA    FCLOSE
       INCT    R14, 
*    return 0;
       S       8, 8                    *   Clear Primary Register
* 
* Local Symbols
* 
*    Symbol   RefersTo   Type  Offset   Size 
* 
*    serial   Variable   Int    -2       0
*    file_u   Variable   Int    -4       0
*    ch       Variable   Int    -6       0
*    filena   Array      Char   -16      1
       AI      R14, 16
       B       *R13                    *   Return From Subroutine
*}
C$1    BYTE    82,83,50,51,50,47,49,46,66,65,61,57
       BYTE    54,48,48,46,68,65,61,56,46,80,65,61
       BYTE    69,46,69,67,46,76,70,0,117,0,119,0
       EVEN
       END
* 
*   31 source lines processed
* 
*   8  global symbols used
*   4  (max) local symbols used
* 
*   No errors found
* 
* 
* Global Symbols
* 
*    Symbol   RefersTo   Type  Offset   Size 
* 
*    fopen    Function
*    fgets    Function
*    fclose   Function
*    getc     Function
*    main     Function
*    putc     Function
*    puts     Function
*    EOF      Function
* 
* Macros
* 
*    Name     Definition 
* 
*    FN_MAX   9
